const fs = require('fs');
const path = require('path');

/**
 * TokenCounter - –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ API –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–æ–¥—Å—á–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
 * - –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –º–æ–¥–µ–ª—è–º
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º
 */
class TokenCounter {
  constructor(options = {}) {
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    this.historyFile = options.historyFile || path.join(__dirname, 'token-usage-history.json');

    // –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
    this.sessionId = Date.now().toString();
    this.sessionStart = new Date();

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    this.sessionStats = {
      totalInputTokens: 0,
      totalOutputTokens: 0,
      totalCost: 0,
      requestCount: 0,
      requests: []
    };

    // –¶–µ–Ω—ã –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
    this.pricing = options.pricing || {
      'gpt-4': { input: 0.03, output: 0.06 },
      'gpt-4-turbo': { input: 0.01, output: 0.03 },
      'gpt-3.5-turbo': { input: 0.0005, output: 0.0015 },
      'claude-3-opus': { input: 0.015, output: 0.075 },
      'claude-3-sonnet': { input: 0.003, output: 0.015 },
      'claude-3-haiku': { input: 0.00025, output: 0.00125 },
      'claude-sonnet-4-5': { input: 0.003, output: 0.015 },
      'default': { input: 0.001, output: 0.002 }
    };

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    this.loadHistory();
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} usage - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @param {number} usage.inputTokens - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
   * @param {number} usage.outputTokens - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
   * @param {string} usage.model - –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @param {string} usage.requestDescription - –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  trackRequest(usage) {
    const { inputTokens, outputTokens, model = 'default', requestDescription = '' } = usage;

    // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏
    const modelPricing = this.pricing[model] || this.pricing['default'];

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
    const inputCost = (inputTokens / 1000) * modelPricing.input;
    const outputCost = (outputTokens / 1000) * modelPricing.output;
    const totalCost = inputCost + outputCost;

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ
    const requestRecord = {
      timestamp: new Date().toISOString(),
      model,
      inputTokens,
      outputTokens,
      totalTokens: inputTokens + outputTokens,
      inputCost: parseFloat(inputCost.toFixed(6)),
      outputCost: parseFloat(outputCost.toFixed(6)),
      totalCost: parseFloat(totalCost.toFixed(6)),
      description: requestDescription
    };

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    this.sessionStats.totalInputTokens += inputTokens;
    this.sessionStats.totalOutputTokens += outputTokens;
    this.sessionStats.totalCost += totalCost;
    this.sessionStats.requestCount++;
    this.sessionStats.requests.push(requestRecord);

    // –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    this.displayRequestStats(requestRecord);

    return requestRecord;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –∫–æ–Ω—Å–æ–ª–∏
   */
  displayRequestStats(record) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–†–û–°–ê');
    console.log('='.repeat(60));
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date(record.timestamp).toLocaleString('ru-RU')}`);
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å: ${record.model}`);
    if (record.description) {
      console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${record.description}`);
    }
    console.log(`\nüì• –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${record.inputTokens.toLocaleString()}`);
    console.log(`üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${record.outputTokens.toLocaleString()}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${record.totalTokens.toLocaleString()}`);
    console.log(`\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏—Ö: $${record.inputCost.toFixed(6)}`);
    console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è—â–∏—Ö: $${record.outputCost.toFixed(6)}`);
    console.log(`üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${record.totalCost.toFixed(6)}`);
    console.log('='.repeat(60) + '\n');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  displaySessionStats() {
    const duration = (Date.now() - new Date(this.sessionStart).getTime()) / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö

    console.log('\n' + '='.repeat(60));
    console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò');
    console.log('='.repeat(60));
    console.log(`üÜî ID —Å–µ—Å—Å–∏–∏: ${this.sessionId}`);
    console.log(`‚è∞ –ù–∞—á–∞–ª–æ: ${this.sessionStart.toLocaleString('ru-RU')}`);
    console.log(`‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration.toFixed(2)} –º–∏–Ω—É—Ç`);
    console.log(`\nüìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${this.sessionStats.requestCount}`);
    console.log(`üì• –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${this.sessionStats.totalInputTokens.toLocaleString()}`);
    console.log(`üì§ –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${this.sessionStats.totalOutputTokens.toLocaleString()}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${(this.sessionStats.totalInputTokens + this.sessionStats.totalOutputTokens).toLocaleString()}`);
    console.log(`\nüíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: $${this.sessionStats.totalCost.toFixed(6)}`);

    if (this.sessionStats.requestCount > 0) {
      const avgCost = this.sessionStats.totalCost / this.sessionStats.requestCount;
      const avgTokens = (this.sessionStats.totalInputTokens + this.sessionStats.totalOutputTokens) / this.sessionStats.requestCount;
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: $${avgCost.toFixed(6)}`);
      console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ${avgTokens.toFixed(0)}`);
    }
    console.log('='.repeat(60) + '\n');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getTopExpensiveRequests(limit = 5) {
    return [...this.sessionStats.requests]
      .sort((a, b) => b.totalCost - a.totalCost)
      .slice(0, limit);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ JSON —Ñ–∞–π–ª
   */
  saveHistory() {
    try {
      let history = [];

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
      if (fs.existsSync(this.historyFile)) {
        const data = fs.readFileSync(this.historyFile, 'utf8');
        history = JSON.parse(data);
      }

      // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      history.push({
        sessionId: this.sessionId,
        sessionStart: this.sessionStart.toISOString(),
        sessionEnd: new Date().toISOString(),
        stats: {
          totalInputTokens: this.sessionStats.totalInputTokens,
          totalOutputTokens: this.sessionStats.totalOutputTokens,
          totalTokens: this.sessionStats.totalInputTokens + this.sessionStats.totalOutputTokens,
          totalCost: parseFloat(this.sessionStats.totalCost.toFixed(6)),
          requestCount: this.sessionStats.requestCount
        },
        requests: this.sessionStats.requests
      });

      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
      fs.writeFileSync(this.historyFile, JSON.stringify(history, null, 2), 'utf8');
      console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${this.historyFile}`);

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
   */
  loadHistory() {
    try {
      if (fs.existsSync(this.historyFile)) {
        const data = fs.readFileSync(this.historyFile, 'utf8');
        this.history = JSON.parse(data);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.history.length} —Å–µ—Å—Å–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏`);
      } else {
        this.history = [];
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
      this.history = [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
   */
  getTotalStats() {
    if (!this.history || this.history.length === 0) {
      return null;
    }

    const total = this.history.reduce((acc, session) => {
      acc.totalInputTokens += session.stats.totalInputTokens || 0;
      acc.totalOutputTokens += session.stats.totalOutputTokens || 0;
      acc.totalTokens += session.stats.totalTokens || 0;
      acc.totalCost += session.stats.totalCost || 0;
      acc.requestCount += session.stats.requestCount || 0;
      return acc;
    }, {
      totalInputTokens: 0,
      totalOutputTokens: 0,
      totalTokens: 0,
      totalCost: 0,
      requestCount: 0,
      sessionCount: this.history.length
    });

    return total;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
   */
  displayTotalStats() {
    const stats = this.getTotalStats();

    if (!stats) {
      console.log('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏');
      return;
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –í–°–ï –í–†–ï–ú–Ø');
    console.log('='.repeat(60));
    console.log(`üî¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${stats.sessionCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.requestCount}`);
    console.log(`üì• –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${stats.totalInputTokens.toLocaleString()}`);
    console.log(`üì§ –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${stats.totalOutputTokens.toLocaleString()}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${stats.totalTokens.toLocaleString()}`);
    console.log(`üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${stats.totalCost.toFixed(6)}`);

    if (stats.requestCount > 0) {
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: $${(stats.totalCost / stats.requestCount).toFixed(6)}`);
    }
    console.log('='.repeat(60) + '\n');
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
   */
  endSession() {
    this.displaySessionStats();
    this.saveHistory();
    this.displayTotalStats();
  }
}

module.exports = TokenCounter;
