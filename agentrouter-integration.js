/**
 * AgentRouter + Token Counter Integration
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Token Counter —Å AgentRouter API
 * –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 *
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *    export ANTHROPIC_API_KEY="your-api-key"
 *    export ANTHROPIC_BASE_URL="https://agentrouter.org/v1"
 *
 * 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 *    npm install @anthropic-ai/sdk
 *
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:
 *    node agentrouter-integration.js
 */

const TokenCounter = require('./token-counter');
const Anthropic = require('@anthropic-ai/sdk');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—á–µ—Ç—á–∏–∫–∞
const tokenCounter = new TokenCounter({
  historyFile: './agentrouter-token-history.json'
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AgentRouter
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const ANTHROPIC_BASE_URL = process.env.ANTHROPIC_BASE_URL || 'https://agentrouter.org/v1';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
if (!ANTHROPIC_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: ANTHROPIC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.error('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('   export ANTHROPIC_API_KEY="your-api-key"');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞ —Å AgentRouter
const anthropic = new Anthropic({
  apiKey: ANTHROPIC_API_KEY,
  baseURL: ANTHROPIC_BASE_URL
});

console.log('üöÄ AgentRouter Token Counter Integration');
console.log('='.repeat(60));
console.log(`üì° API Endpoint: ${ANTHROPIC_BASE_URL}`);
console.log(`üîë API Key: ${ANTHROPIC_API_KEY.substring(0, 10)}...`);
console.log('='.repeat(60) + '\n');

/**
 * –í—ã–∑–æ–≤ AgentRouter API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
 *
 * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {string} options.model - –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: claude-sonnet-4-5)
 * @param {number} options.maxTokens - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
 * @param {number} options.temperature - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0-1)
 * @returns {Promise<string>} - –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
 */
async function callAgentRouter(prompt, options = {}) {
  const {
    model = 'claude-sonnet-4-5',
    maxTokens = 1024,
    temperature = 1.0
  } = options;

  console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ AgentRouter...');
  console.log(`   –ú–æ–¥–µ–ª—å: ${model}`);
  console.log(`   –ó–∞–ø—Ä–æ—Å: ${prompt.substring(0, 50)}${prompt.length > 50 ? '...' : ''}`);

  const startTime = Date.now();

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AgentRouter
    const response = await anthropic.messages.create({
      model: model,
      max_tokens: maxTokens,
      temperature: temperature,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });

    const duration = Date.now() - startTime;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    const responseText = response.content[0].text;

    // –í–ê–ñ–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if (response.usage) {
      tokenCounter.trackRequest({
        inputTokens: response.usage.input_tokens,
        outputTokens: response.usage.output_tokens,
        model: model,
        requestDescription: prompt.substring(0, 100)
      });
    }

    console.log(`\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${duration}ms`);
    console.log(`   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    return responseText;

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AgentRouter API:');

    if (error.status) {
      console.error(`   HTTP Status: ${error.status}`);
    }

    if (error.message) {
      console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (error.status === 401) {
      console.error('\n   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ANTHROPIC_API_KEY');
    } else if (error.status === 429) {
      console.error('\n   üí° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
    } else if (error.status === 500) {
      console.error('\n   üí° –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ AgentRouter. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    throw error;
  }
}

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 *
 * @param {Array<string>} prompts - –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * @returns {Promise<Array<string>>} - –ú–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
 */
async function batchProcess(prompts, options = {}) {
  console.log(`\nüì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${prompts.length} –∑–∞–ø—Ä–æ—Å–æ–≤...`);

  const results = [];

  for (let i = 0; i < prompts.length; i++) {
    console.log(`\n[${i + 1}/${prompts.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...`);

    try {
      const result = await callAgentRouter(prompts[i], options);
      results.push(result);

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
      if (i < prompts.length - 1) {
        console.log('   ‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞...');
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error(`   ‚ùå –ó–∞–ø—Ä–æ—Å ${i + 1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`);
      results.push(null);
    }
  }

  const successCount = results.filter(r => r !== null).length;
  console.log(`\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount}/${prompts.length} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`);

  return results;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
 */
function displayFinalStats() {
  console.log('\n' + '='.repeat(60));
  console.log('üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('='.repeat(60));

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
  tokenCounter.displaySessionStats();

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const topExpensive = tokenCounter.getTopExpensiveRequests(3);
  if (topExpensive.length > 0) {
    console.log('\nüîù –¢–û–ü-3 –°–ê–ú–´–• –î–û–†–û–ì–ò–• –ó–ê–ü–†–û–°–û–í:\n');
    topExpensive.forEach((req, index) => {
      console.log(`${index + 1}. ${req.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}`);
      console.log(`   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${req.totalCost.toFixed(6)}`);
      console.log(`   üìä –¢–æ–∫–µ–Ω—ã: ${req.totalTokens.toLocaleString()}`);
      console.log(`   ü§ñ –ú–æ–¥–µ–ª—å: ${req.model}\n`);
    });
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  console.log('='.repeat(60));
  console.log('üìö –†–ï–ü–û–ó–ò–¢–û–†–ò–ô');
  console.log('='.repeat(60));
  console.log('üîó GitHub: https://github.com/your-username/test-agentrouter');
  console.log('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README-TokenCounter.md');
  console.log('üíæ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–æ–≤: agentrouter-token-history.json');
  console.log('='.repeat(60) + '\n');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.on('exit', () => {
  console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
  tokenCounter.saveHistory();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)');
  displayFinalStats();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  displayFinalStats();
  process.exit(1);
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function main() {
  try {
    console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AgentRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

    // ============================================================
    // –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    // ============================================================
    console.log('\n' + '='.repeat(60));
    console.log('üìù –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å');
    console.log('='.repeat(60));

    const response1 = await callAgentRouter(
      '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ JavaScript –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª',
      { model: 'claude-sonnet-4-5' }
    );

    console.log('\nüìÑ –û—Ç–≤–µ—Ç:');
    console.log(response1.substring(0, 200) + '...');

    // ============================================================
    // –ü–†–ò–ú–ï–† 2: –ó–∞–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    // ============================================================
    console.log('\n\n' + '='.repeat(60));
    console.log('üìù –ü–†–ò–ú–ï–† 2: –ó–∞–ø—Ä–æ—Å —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π 0.5');
    console.log('='.repeat(60));

    const response2 = await callAgentRouter(
      '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏—è –≤ JavaScript –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö',
      {
        model: 'claude-sonnet-4-5',
        temperature: 0.5,
        maxTokens: 500
      }
    );

    console.log('\nüìÑ –û—Ç–≤–µ—Ç:');
    console.log(response2);

    // ============================================================
    // –ü–†–ò–ú–ï–† 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    // ============================================================
    console.log('\n\n' + '='.repeat(60));
    console.log('üìù –ü–†–ò–ú–ï–† 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('='.repeat(60));

    const prompts = [
      '–ß—Ç–æ —Ç–∞–∫–æ–µ async/await –≤ JavaScript? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.',
      '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Promise –≤ JavaScript? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.',
      '–ß—Ç–æ —Ç–∞–∫–æ–µ event loop? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.'
    ];

    const batchResults = await batchProcess(prompts, {
      model: 'claude-sonnet-4-5',
      maxTokens: 300
    });

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
    batchResults.forEach((result, index) => {
      if (result) {
        console.log(`\n${index + 1}. ${prompts[index]}`);
        console.log(`   ‚úÖ ${result.substring(0, 100)}...`);
      }
    });

    // ============================================================
    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ============================================================
    displayFinalStats();

  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main():', error.message);
    displayFinalStats();
    process.exit(1);
  }
}

// ============================================================
// –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–ê–ö –ú–û–î–£–õ–Ø
// ============================================================
module.exports = {
  callAgentRouter,
  batchProcess,
  tokenCounter
};

// ============================================================
// –ó–ê–ü–£–°–ö, –ï–°–õ–ò –§–ê–ô–õ –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –ù–ê–ü–†–Ø–ú–£–Æ
// ============================================================
if (require.main === module) {
  console.log('üé¨ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...\n');

  main().then(() => {
    console.log('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
    process.exit(1);
  });
}
